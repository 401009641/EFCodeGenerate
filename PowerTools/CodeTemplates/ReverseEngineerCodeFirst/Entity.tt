<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
	efHost.Namespace = "Decision.Entity";
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= ToPascal(efHost.EntityType.Name) #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= ToPascal(code.Escape(efHost.EntityType)) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= ToPascal(code.Escape(navProperty)) #> = new List<<#= ToPascal(code.Escape(navProperty.ToEndMember.GetEntityType())) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= ToPascal(code.Escape(property)) #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= ToPascal(code.Escape(navProperty.ToEndMember.GetEntityType())) #>> <#= ToPascal(code.Escape(navProperty)) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= ToPascal(code.Escape(navProperty.ToEndMember.GetEntityType())) #> <#= ToPascal(code.Escape(navProperty)) #> { get; set; }
<#
        }
    }
#>
    }
}


<#+
 public string ToPascal(string raw)
 {
    var value = new StringBuilder("");
    var names = raw.ToLower().Split("_".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();
    foreach (var name in names)
    {
        value.Append(name[0].ToString().ToUpper());
        value.Append(name.Skip(1).ToArray());
    }
    return value.ToString();
 }
#>